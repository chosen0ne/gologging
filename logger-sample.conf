# 'loggers' is parse root of the config file. A log configuration file
# must has the option of 'loggers', which specified the Logger to be
# configured.
# Values of 'loggers' is a array of the logger names, which have a config
# section in the following file.
loggers: logger-error logger-info logger-dev

# definition of loggers
# The name pattern of config section is [logger-${LOGGER_NAME}]
# for example:
#       [logger-error]      // 'error' is the logger name
# you can get logger as follows:
#       gologging.GetLogger("error")
#
# The properties of the loggers are as follows:
#   level: level of the logger. Default is INFO
#   handlers: a array of Handlers for the logger. Each handler has a config
#           section in the following file.
[logger-error]
    level: ERROR
    handlers: handler-error handler-console

[logger-info]
    level: INFO
    handlers: handler-info

[logger-dev]
    handlers: handler-console

# definition of handlers
# The properties of the handlers are as follows:
#   type: specify the type of the handler. It can be 'console', 'time-rotate'
#           and 'size-rotate'.
#   formatter: specify the config name of the Formatter. And a config named
#           ${formatter} must be inclueded in the file.
#   sync: specify the sync mode of the handler.
#   log-path: the log file output path. It's taken effect only in 'time-rotate'
#           and 'size-rotate' handlers.
#   file-name: file name for the log file. It' s taken effect only in 'time-rotate'
#           and 'size-roate' handlers.
#   interval: specify the rotation interval for 'time-rotate' handler.
#   max-size: specify the rotation size for 'size-rotate' handler.
#   backup-count: specify the max number of log files to retain. It's taken effect
#           only in 'time-rotate' and 'size-rotate' handlers.
#   extends: to avoid repetition, a config can be reused by a handler. 'extends'
#           specifies the origin config, and all the config items can be rewritten
#           by the items in the handler section. A config section named ${extends}
#           must be found in the file.
[handler-console]
    type: console
    formatter: formatter-1

[handler-error]
    extends: time-rotate-conf
    file-name: error.log
    sync: true

[handler-info]
    extends: time-rotate-conf
    log-path: ./
    file-name: info.log

[handler-comman]
    extends: time-rotate-conf
    file-name: ${logger-name}

# definition of formatter
# The properties of the formmater are:
#   format: format string. Attributes supported are as follows:
#	    ${date}: '2006-10-11'
#	    ${time}: '15:01:21'
#	    ${datetime}: '2006-10-11 15:01:21'
#	    ${funcname}: 'logging.(*Formatter).Format'
#	    ${filename}: 'formatter.go'. The name of the file include the invokation
#	    			 of Logger.Log()
#	    ${filepath}: The fullpath of the file.
#	    ${lineno}: The line number of the invokation in the file.
#	    ${levelname}: The level of the log.
#	    ${message}: The message to log
[formatter-1]
    format: ${datetime} [${levelname}][${name}] ${filename}:${lineno} ${message}

# a handler config to reuse
[time-rotate-conf]
    type: time-rotate
    interval: 1day
    backup-count: 10
    formatter: formatter-1

[size-rotate-conf]
    type: size-rotate
    max-size: 1GB
    backup-count: 10
    formatter: formatter-1
